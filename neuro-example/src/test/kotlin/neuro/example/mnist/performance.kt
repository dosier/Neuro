//package neuro.example.mnist
//
//import kercept.math.FloatMatrix
//import kercept.math.FloatVector
//import kotlin.system.measureTimeMillis
//
//
//fun main() {
//    val n = 1_000_000_0
//
//    val data = doubleArrayOf(
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0,
//            1.0, 2.0, 3.0, 4.0, 5.0,
//            6.0, 7.0, 8.0, 9.0, 10.0,
//            11.0, 12.0, 13.0, 14.0, 15.0)
//    val matrix = kercept.math.DoubleMatrix(28*3, 5, data)
//
//    val fData = data .map { it.toFloat() }.toFloatArray()
//    val fMatrix = FloatMatrix(28*3, 5, fData)
//
//    for(i in 0 until n) {
//
//        val fVector = FloatVector(3F, 3F, 3F, 3F, 3F)
//        fMatrix.times(fVector)
//        val vector = DoubleVector(3.0, 3.0, 3.0, 3.0, 3.0)
//        matrix.times(vector)
//    }
//
//    val doubleMat = measureTimeMillis {
//        for(i in 0 until n) {
//            val vector = DoubleVector(3.0, 3.0, 3.0, 3.0, 3.0)
//            val result = matrix.times(vector)
//        }
//    }
//
//    val floatMat = measureTimeMillis {
//        for(i in 0 until n) {
//            val vector = FloatVector(3F, 3F, 3F, 3F, 3F)
//            val result = fMatrix.times(vector)
//        }
//    }
//    println("doubleMat = $doubleMat")
//    println("floatMat = $floatMat")
//
//}